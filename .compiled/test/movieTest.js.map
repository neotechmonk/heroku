{"version":3,"sources":["../../src/test/movieTest.js"],"names":["assertArrays","moviesResult","movieResult","resetResults","describe","it","done","assert","isNotNull","to","be","array","not","ofSize","property"],"mappings":";;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,eAAIA,oBAAJ;;AAEA,IAAIC,eAAe,IAAnB;;AAEA;AACA,IAAIC,cAAc,IAAlB;;AAEA,SAASC,YAAT,GAAwB;AACtBF,iBAAeC,cAAc,IAA7B;AACD;AACDE,SAAS,OAAT,EAAkB,YAAW;AAC3BA,WAAS,eAAT,EAA0B,YAAW;AACnCC,OAAG,gCAAH,EAAqC,UAASC,IAAT,EAAe;AAClD,2BAAU,UAASL,YAAT,EAAuB;AAC/BM,qBAAOC,SAAP,CAAiBP,YAAjB;AACAK;AACD,OAHD;AAID,KALD;;AAOAD,OAAG,2BAAH,EAAgC,UAASC,IAAT,EAAe;AAC7C,2BAAU,UAASL,YAAT,EAAuB;AAC/B,0BAAOA,YAAP,EAAqBQ,EAArB,CAAwBC,EAAxB,CAA2BC,KAA3B;AACAL;AACD,OAHD;AAID,KALD;;AAOAD,OAAG,uEAAH,EAA4E,UAASC,IAAT,EAAe;AACzF,2BAAU,UAASL,YAAT,EAAuB;AAC/B,0BAAOA,YAAP,EAAqBW,GAArB,CAAyBH,EAAzB,CAA4BC,EAA5B,CAA+BG,MAA/B,CAAsC,CAAtC;AACAP;AACD,OAHD;AAID,KALD;;AAOAD,OAAG,yEAAH,EAA8E,UAASC,IAAT,EAAe;AAC3F,2BAAU,UAASL,YAAT,EAAuB;AAC/BC,sBAAcD,aAAa,CAAb,CAAd;AACAM,qBAAOO,QAAP,CACEZ,WADF,EAEE,OAFF,EAGE,oCAHF;AAKAK,qBAAOO,QAAP,CACEZ,WADF,EAEE,IAFF,EAGE,kCAHF;AAKAK,qBAAOO,QAAP,CACEZ,WADF,EAEE,UAFF,EAGE,yCAHF;AAKA;;AAEAI;AACD,OApBD;AAqBD,KAtBD;AAuBD,GA7CD;AA8CD,CA/CD","file":"movieTest.js","sourcesContent":["import { use, assert, expect } from \"chai\";\r\nimport assertArrays from \"chai-arrays\";\r\nimport mocha from \"mocha\";\r\nimport getMovies from \"../movie\";\r\n\r\nuse(assertArrays);\r\n\r\nvar moviesResult = null;\r\n\r\n//get the first movie as the sample test with\r\nvar movieResult = null;\r\n\r\nfunction resetResults() {\r\n  moviesResult = movieResult = null;\r\n}\r\ndescribe(\"Movie\", function() {\r\n  describe(\"App-getMOvies\", function() {\r\n    it(\"Movies object shouldnt be null\", function(done) {\r\n      getMovies(function(moviesResult) {\r\n        assert.isNotNull(moviesResult);\r\n        done();\r\n      });\r\n    });\r\n\r\n    it(\"Movies should be an array\", function(done) {\r\n      getMovies(function(moviesResult) {\r\n        expect(moviesResult).to.be.array();\r\n        done();\r\n      });\r\n    });\r\n\r\n    it(\"Movies arrays should have atleast one  movie exists in the datasource\", function(done) {\r\n      getMovies(function(moviesResult) {\r\n        expect(moviesResult).not.to.be.ofSize(0);\r\n        done();\r\n      });\r\n    });\r\n\r\n    it(\"movie has key properties if at least one movie exists in the datasource\", function(done) {\r\n      getMovies(function(moviesResult) {\r\n        movieResult = moviesResult[0];\r\n        assert.property(\r\n          movieResult,\r\n          \"title\",\r\n          \"movie doesnt have a title property\"\r\n        );\r\n        assert.property(\r\n          movieResult,\r\n          \"id\",\r\n          \"movie doesnt have an id property\"\r\n        );\r\n        assert.property(\r\n          movieResult,\r\n          \"sessions\",\r\n          \"movie doesnt have the sessions property\"\r\n        );\r\n        // this doesnt work chai.assert.deepProperty(movieResult, \"sessions.location\");\r\n\r\n        done();\r\n      });\r\n    });\r\n  });\r\n});\r\n"]}