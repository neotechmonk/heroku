{"version":3,"sources":["../../src/test/movieTest.js"],"names":["chai","require","assertArrays","mocha","getMovies","use","moviesResult","movieResult","resetResults","describe","it","done","assert","isNotNull","expect","to","be","array","not","ofSize","property"],"mappings":";;AAAA,IAAIA,OAAOC,QAAQ,MAAR,CAAX;AACA,IAAIC,eAAeD,QAAQ,aAAR,CAAnB;AACA,IAAIE,QAAQF,QAAQ,OAAR,CAAZ;AACA,IAAIG,YAAYH,QAAQ,UAAR,CAAhB;;AAEAD,KAAKK,GAAL,CAASH,YAAT;;AAEA,IAAII,eAAe,IAAnB;;AAEA;AACA,IAAIC,cAAc,IAAlB;;AAEA,SAASC,YAAT,GAAwB;AACtBF,iBAAeC,cAAc,IAA7B;AACD;AACDE,SAAS,OAAT,EAAkB,YAAW;AAC3BA,WAAS,eAAT,EAA0B,YAAW;AACnCC,OAAG,gCAAH,EAAqC,UAASC,IAAT,EAAe;AAClDP,gBAAU,UAASE,YAAT,EAAuB;AAC/BN,aAAKY,MAAL,CAAYC,SAAZ,CAAsBP,YAAtB;AACAK;AACD,OAHD;AAID,KALD;;AAOAD,OAAG,2BAAH,EAAgC,UAASC,IAAT,EAAe;AAC7CP,gBAAU,UAASE,YAAT,EAAuB;AAC/BN,aAAKc,MAAL,CAAYR,YAAZ,EAA0BS,EAA1B,CAA6BC,EAA7B,CAAgCC,KAAhC;AACAN;AACD,OAHD;AAID,KALD;;AAOAD,OAAG,uEAAH,EAA4E,UAASC,IAAT,EAAe;AACzFP,gBAAU,UAASE,YAAT,EAAuB;AAC/BN,aAAKc,MAAL,CAAYR,YAAZ,EAA0BY,GAA1B,CAA8BH,EAA9B,CAAiCC,EAAjC,CAAoCG,MAApC,CAA2C,CAA3C;AACAR;AACD,OAHD;AAID,KALD;;AAOAD,OAAG,yEAAH,EAA8E,UAASC,IAAT,EAAe;AAC3FP,gBAAU,UAASE,YAAT,EAAuB;AAC/BC,sBAAcD,aAAa,CAAb,CAAd;AACAN,aAAKY,MAAL,CAAYQ,QAAZ,CACEb,WADF,EAEE,OAFF,EAGE,oCAHF;AAKAP,aAAKY,MAAL,CAAYQ,QAAZ,CACEb,WADF,EAEE,IAFF,EAGE,kCAHF;AAKAP,aAAKY,MAAL,CAAYQ,QAAZ,CACEb,WADF,EAEE,UAFF,EAGE,yCAHF;AAKA;;AAEAI;AACD,OApBD;AAqBD,KAtBD;AAuBD,GA7CD;AA8CD,CA/CD","file":"movieTest.js","sourcesContent":["var chai = require(\"chai\");\r\nvar assertArrays = require(\"chai-arrays\");\r\nvar mocha = require(\"mocha\");\r\nvar getMovies = require(\"../movie\");\r\n\r\nchai.use(assertArrays);\r\n\r\nvar moviesResult = null;\r\n\r\n//get the first movie as the sample test with\r\nvar movieResult = null;\r\n\r\nfunction resetResults() {\r\n  moviesResult = movieResult = null;\r\n}\r\ndescribe(\"Movie\", function() {\r\n  describe(\"App-getMOvies\", function() {\r\n    it(\"Movies object shouldnt be null\", function(done) {\r\n      getMovies(function(moviesResult) {\r\n        chai.assert.isNotNull(moviesResult);\r\n        done();\r\n      });\r\n    });\r\n\r\n    it(\"Movies should be an array\", function(done) {\r\n      getMovies(function(moviesResult) {\r\n        chai.expect(moviesResult).to.be.array();\r\n        done();\r\n      });\r\n    });\r\n\r\n    it(\"Movies arrays should have atleast one  movie exists in the datasource\", function(done) {\r\n      getMovies(function(moviesResult) {\r\n        chai.expect(moviesResult).not.to.be.ofSize(0);\r\n        done();\r\n      });\r\n    });\r\n\r\n    it(\"movie has key properties if at least one movie exists in the datasource\", function(done) {\r\n      getMovies(function(moviesResult) {\r\n        movieResult = moviesResult[0];\r\n        chai.assert.property(\r\n          movieResult,\r\n          \"title\",\r\n          \"movie doesnt have a title property\"\r\n        );\r\n        chai.assert.property(\r\n          movieResult,\r\n          \"id\",\r\n          \"movie doesnt have an id property\"\r\n        );\r\n        chai.assert.property(\r\n          movieResult,\r\n          \"sessions\",\r\n          \"movie doesnt have the sessions property\"\r\n        );\r\n        // this doesnt work chai.assert.deepProperty(movieResult, \"sessions.location\");\r\n\r\n        done();\r\n      });\r\n    });\r\n  });\r\n});\r\n"]}