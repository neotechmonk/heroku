{"version":3,"sources":["../../src/test/movieTest.js"],"names":["assertArrays","moviesResult","movieResult","resetResults","describe","it","assert","isNotNull","done","to","be","array","not","ofSize","property"],"mappings":";;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,eAAIA,oBAAJ;;AAEA,IAAIC,eAAe,IAAnB;;AAEA;AACA,IAAIC,cAAc,IAAlB;;AAEA,SAASC,YAAT,GAAwB;AACtBF,iBAAeC,cAAc,IAA7B;AACD;AACDE,SAAS,OAAT,EAAkB,YAAM;AACtBA,WAAS,eAAT,EAA0B,YAAM;AAC9BC,OAAG,gCAAH,EAAqC,gBAAQ;AAC3C,2BAAU,wBAAgB;AACxBC,qBAAOC,SAAP,CAAiBN,YAAjB;AACAO;AACD,OAHD;AAID,KALD;;AAOAH,OAAG,2BAAH,EAAgC,UAACG,IAAD,EAAU;AACxC,2BAAU,UAACP,YAAD,EAAkB;AAC1B,0BAAOA,YAAP,EAAqBQ,EAArB,CAAwBC,EAAxB,CAA2BC,KAA3B;AACAH;AACD,OAHD;AAID,KALD;;AAOAH,OAAG,uEAAH,EAA4E,UAACG,IAAD,EAAU;AACpF,2BAAU,UAACP,YAAD,EAAkB;AAC1B,0BAAOA,YAAP,EAAqBW,GAArB,CAAyBH,EAAzB,CAA4BC,EAA5B,CAA+BG,MAA/B,CAAsC,CAAtC;AACAL;AACD,OAHD;AAID,KALD;;AAOAH,OAAG,yEAAH,EAA8E,UAACG,IAAD,EAAU;AACtF,2BAAU,UAACP,YAAD,EAAkB;AAC1BC,sBAAcD,aAAa,CAAb,CAAd;AACAK,qBAAOQ,QAAP,CACEZ,WADF,EAEE,OAFF,EAGE,oCAHF;AAKAI,qBAAOQ,QAAP,CAAgBZ,WAAhB,EAA6B,IAA7B,EAAmC,kCAAnC;AACAI,qBAAOQ,QAAP,CACEZ,WADF,EAEE,UAFF,EAGE,yCAHF;AAKA;AACAM;AACD,OAfD;AAgBD,KAjBD;AAkBD,GAxCD;AAyCD,CA1CD","file":"movieTest.js","sourcesContent":["import { use, assert, expect } from \"chai\";\r\nimport assertArrays from \"chai-arrays\";\r\nimport mocha from \"mocha\";\r\nimport getMovies from \"../movie\";\r\n\r\nuse(assertArrays);\r\n\r\nvar moviesResult = null;\r\n\r\n//get the first movie as the sample test with\r\nvar movieResult = null;\r\n\r\nfunction resetResults() {\r\n  moviesResult = movieResult = null;\r\n}\r\ndescribe(\"Movie\", () => {\r\n  describe(\"App-getMOvies\", () => {\r\n    it(\"Movies object shouldnt be null\", done => {\r\n      getMovies(moviesResult => {\r\n        assert.isNotNull(moviesResult);\r\n        done();\r\n      });\r\n    });\r\n\r\n    it(\"Movies should be an array\", (done)=>  {\r\n      getMovies((moviesResult)=>  {\r\n        expect(moviesResult).to.be.array();\r\n        done();\r\n      });\r\n    });\r\n\r\n    it(\"Movies arrays should have atleast one  movie exists in the datasource\", (done)=>  {\r\n      getMovies((moviesResult)=>  {\r\n        expect(moviesResult).not.to.be.ofSize(0);\r\n        done();\r\n      });\r\n    });\r\n\r\n    it(\"movie has key properties if at least one movie exists in the datasource\", (done) => {\r\n      getMovies((moviesResult)=>  {\r\n        movieResult = moviesResult[0];\r\n        assert.property(\r\n          movieResult,\r\n          \"title\",\r\n          \"movie doesnt have a title property\"\r\n        );\r\n        assert.property(movieResult, \"id\", \"movie doesnt have an id property\");\r\n        assert.property(\r\n          movieResult,\r\n          \"sessions\",\r\n          \"movie doesnt have the sessions property\"\r\n        );\r\n        // this doesnt work chai.assert.deepProperty(movieResult, \"sessions.location\");\r\n        done();\r\n      });\r\n    });\r\n  });\r\n});\r\n"]}